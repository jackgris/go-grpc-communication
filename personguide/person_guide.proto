syntax = "proto3";

option go_package = "github.com/jackgris/go-grpc-communication/personguide";

package personguide;

import "google/protobuf/timestamp.proto";

// Interface exported by the server.
service PersonGuide {
  // A simple RPC.
  //
  // Obtains the PhoneNumber from the given Person
  //
  // A phone with an empty number is returned if there's no phone at the given
  // person.
  rpc GetPhone(Person) returns (PhoneNumber) {}

  // A server-to-client streaming RPC.
  //
  // Obtains the Persons related to the adress.  Results are
  // streamed rather than returned at once (e.g. in a response message with a
  // repeated field).
  rpc ListPersons(Adress) returns (stream Person) {}

  // A client-to-server streaming RPC.
  //
  // Accepts a stream of Persons on a route being traversed, returning a
  // AddressBook when traversal is completed.
  rpc RecordPersons(stream Person) returns (AddressBook) {}

  // A Bidirectional streaming RPC.
  //
  // Accepts a stream of Person sent while a route is being traversed,
  // while receiving Phone Numbers (e.g. from other users).
  rpc RoutePhones(stream Person) returns (stream PhoneNumber) {}
}

message Person {
  string name = 1;
  int32 id = 2;  // Unique ID number for this person.
  string email = 3;

  repeated PhoneNumber phones = 4;

  google.protobuf.Timestamp last_updated = 5;
}


enum PhoneType {
  MOBILE = 0;
  HOME = 1;
  WORK = 2;
}

message PhoneNumber {
  string number = 1;
  PhoneType type = 2;
}

// Our address book file is just one of these.
message AddressBook {
  repeated Person people = 1;
}

message Adress {
  string name = 1;
}
